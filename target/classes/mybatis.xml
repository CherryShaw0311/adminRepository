<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <properties resource="jdbc.properties"></properties>
    <settings>
        <setting name="logImpl" value="STDOUT_LOGGING"/>
        <!--
        例如可以在这里配置二级缓存，配置查询延迟加载策略等
            配置的目的是为了更加有效的查询表中的记录
         在实际向项目开发中，settings的设置基本没用
         因为，这个settings对于查询的优化，得到的效果不明显

         对于海量级别的数据，对于settings配置优化，起不到任何效果
         对于数据量少的项目，对于查询的效率要求的比较低，也没有必要时用settings的配置

         如果遇到海量级别的数据，如何提高查询的效率

         基础操作：
            对于常用的查询条件的字段，设置索引

         高级操作：
            使用nosql数据库，redis

         专业操作：
            Elaticsearch与Solr
            针对于电商行业

        -->
    </settings>
    <typeAliases>
        <!--
        第一种方式
        <typeAlias type="com.xiao.domain.Student" alias="stu"></typeAlias>
        -->
        <!--
        第二种方式:
            （1）还是方式二用的多
            （2）但是有的公司还是不用起别名的方式，直接用全限定名称
        -->
        <package name="com.xiao.domain"/>
    </typeAliases>

    <environments default="mydev">
        <environment id="mydev">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <!--
        未来项目开发中建议使用第三种
        -->
        <!--第一种-->
        <!--<mapper resource="com/xiao/dao/StudentDao.xml"/>-->
        <!--第二种-->
        <!--<mapper class="com.xiao.dao.StudentDao"></mapper>-->
        <!--第三种-->
        <package name="com.xiao.dao"/>
    </mappers>
</configuration>
